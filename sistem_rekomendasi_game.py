# -*- coding: utf-8 -*-
"""sistem_rekomendasi_game.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sebF12pL3Vo_eA5IYgCTk35PjZCkeQ_R

# Sistem Rekomendasi Game mengunakan metode Content Base Filtering

# Pertanyaan Bisnis
1. Bagaimana merekomendasikan game kepada pengguna berdasarkan kesukaan genre yang sama
2. Bagaimana menghitung akurasi berbasis evaluasi, berdasarkan sistem rekomendasi games berdasarkan genre

#Link dataset
kaagle : https://www.kaggle.com/datasets/uuratl/metacritic-games-12-23-2024

# Persiapan Library
"""

import pandas as pd
import numpy as np
import kagglehub
import re
from kagglehub import KaggleDatasetAdapter
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer

"""# Data Understanding"""

# Set the path to the file you'd like to load
file_path = "12_23_2024_detailed_data.csv"

df = kagglehub.load_dataset(
  KaggleDatasetAdapter.PANDAS,
  "uuratl/metacritic-games-12-23-2024",
  file_path,
)
df.head()

"""Mengambil dataset menggunakan library bawaan kaagle, agar projek bisa di running tanpa perlu input dataset


---
KaggleDatasetAdapter.PANDAS akan memanggil fungsi pandas
file_path, mengambil nama file dari link dataset

# Univariate Exploratory Data Analysis

## melihat dimensi data
"""

df.shape

"""Melihat baris dan kolom yang dimiliki dataset

## Melihat informasi dataset
"""

df.info()

"""Dataset mentah memiliki total 13390 baris, kebanyakan bertype object, dan dua kolom bertype int64

### Mengecek Duplikasi
"""

df.duplicated().sum()

"""tidak terdapat baris dengan nilai yang sama

---

fungsi duplicated mengambil baris yang memiliki duplikasi, dan sum menghitung jumlah duplikasi yang ada

### Mengecek nilai unik Kolom Genres
"""

df['genres'].unique()

"""Menjabarkan nilai unique dari genres, sebagai pertimbangan masukan untuk fungsi rekomendasi nanti

# Data Preparation

## Mengatasi missing value
"""

df.isnull().sum()

"""Terdapat 2 kolom yang memiliki missing value, yaitu user_review_count dan esrb.


---
mengunakan perintah isnull untuk mengetahui kolom yang memiliki nilai null, dan sum() untuk menjumlahkan nilai null dalam satu kolom

"""

df_clean = df.dropna()
df_clean

"""baris yang memiliki nilai nan saya hapus untuk meningkatkan performa model


---
fungsi dropna mengambil baris mana yang memiliki nilai nan, kemudian menghapusnya

"""

df_clean.isnull().sum()

"""Terlihat tidak adanya lagi missing value disetiap kolom

## Menghapus kolom
"""

df_clean = df_clean.drop('Unnamed: 0', axis=1)

"""saya menghapus kolom Unnamed:0 yang tidak sengaja terbuat ketika memanggil file csv

---
fungsi drop akan langsung menghapus nama kolom dalam argumen, dalam hal ini 'Unnamed: 0'

## Mengurutkan berdasarkan Genre Games
"""

df_clean.sort_values(by='genres', inplace=True)

"""Mengurutkan berdasarkan genre, untuk mempermudah menemukan game dengan genre yang sama

---
fungsi sort.values akan mengurutkan values berdasarkan kolom yang dipilih, dalam hal ini genres

## Menormalisasi Data
"""

# Menormalisasi kolom metacritic_review_count
df_clean['metacritic_review_count'] = df_clean['metacritic_review_count'].str.replace('Based on', '')
df_clean['metacritic_review_count'] = df_clean['metacritic_review_count'].str.replace('Critic Reviews', '')

# Menormalisasi kolom user_review_count
df_clean['user_review_count'] = df_clean['user_review_count'].str.replace('Based on', '')
df_clean['user_review_count'] = df_clean['user_review_count'].str.replace('User Ratings', '')

#Menormalisasi kolom Developer
df_clean['developer'] = df_clean['developer'].str.replace('Developer: ', '')

# Menormalisasi kolom publiser
df_clean['publisher'] = df_clean['publisher'].str.replace('Publisher: ', '')

# Menormalisasi Kolom esrb
df_clean['esrb'] = df_clean['esrb'].str.replace('Rated', '')

"""Membersihkan kolom dari string, berfungsi agar kolom hanya memiliki nilai numeric, untuk mempersiapkan analysis. Jikalau kolom tersebut akan dipakai nantinya

---
fungsi str.replace menganti value strin menjadi value yang lain. dalam hal ini menganti kata dengan nilai kosong

## Merubah Type Data
"""

# Merubah type data metacritic_review_count
df_clean['metacritic_review_count']=df_clean['metacritic_review_count'].astype(int)

# merubah type data metacritic_review_score
df_clean['metacritic_review_score']=df_clean['metacritic_review_score'].astype(int)

# merubah type data user_review_count
df_clean['user_review_count'] = df_clean['user_review_count'].str.replace(',', '').astype(float)

# merubah type data user_review_score
df_clean['user_review_score']=df_clean['user_review_score'].astype(float)

"""Mengubah type data kolom menjadi int dan float, agar lebih sesuai dengan isi kolom sekarang

---
fungsi astype menganti type kolom menjadi type yang kita inginkan

"""

df_clean.info()

"""Menampilkan informasi dataset yang sudah dibersihkan, terlihat kalau dataset hanya memiliki 9902 baris yang tersisa.
metacritic_review_count dan metacritic_review_score sudah berubah menjadi int.
user_review_count dan user_review_score sudah berubah menjadi float

## Membuat kolom Combinasi
"""

df_clean['combined_features']= df_clean['name'].fillna('') + '' + df_clean['developer'].fillna('') + '' + df_clean['publisher'].fillna('') + '' + df_clean['genres'].fillna('') + '' + df_clean['esrb'].fillna('')

"""kolom kombinasi berguna untuk menghitung nilai cosine_similarity nantinya.

---
kolom combined_features akan berisi value kombinasi dari kolom yang dipilih, setiap value akan dipisahkan dengan '' melalui fungsi fillna

## menormalisasi kolom kombinasi
"""

def clean_text(text):
    text = text.lower()
    text = re.sub(r'[^\w\s]', '', text)  # hapus tanda baca
    text = re.sub(r'\d+', '', text)      # hapus angka
    return text

df_clean['combined_features']=df_clean['combined_features'].apply(clean_text)

"""Melakukan normalisasi terhadap kolom combined_features, dengan mengubah menjadi lower case, membersihkan tanda baca, dan angka untuk mempersiapkan untuk digunakan dalam tf idf nantinya.

---

fungsi text.lower mengubah setiap text menjadi lower case.
fungsi re.sub menghapus tanda baca dan angka untuk setiap text

## TF-IDF Vectorizer
"""

tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df_clean['combined_features'])

"""Mempersiapkan agar kolom bisa digunakan dalam sistem rekomendasi menggunakan tf-idf


---

**TfidfVectorizer(stop_words='english'**) memanggil object tf-idf dari library sklearn. **TF-IDF** berguna untuk mengetahui seberapa penting suatu kata dalam setiap dokumen, **stop_words=english** membuat model mengabaikan stop words umum dalam bahasa inggriss
fungsi **fit** belajar mengenail vocabulary dari kolom combined_features, untuk mengetahui nilai unique dan distribusi didalam kolom
fungsi **transform**, untuk mengubah teks menjadi bentuk numeric

# Model Development dengan Content Based Filtering

## Menghitung cosine similarity
"""

cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)
print('Ukuran matriks cosine similarity:', cosine_sim.shape)

"""cosine_sim, berfungsi untuk menghitung similarity antara 2 arrays, dalam hal ini, saya menghitung cosine similarity dalam setiap permainan.
fungsi **shape** mencetak ukuran dari matriks dalam hal ini kesamaan antara setiap game dengan game yang lain, karena tfidf_matrix dipanggil 2 kali.
nilai 9902 mewakili baris dan kolom, juga dapat berarti jumlah game dalam dataset yang sudah dibersihkan

## Membuat fungsi rekomendasi berdasarkan genre
"""

def recommend_games_by_genre(genre, top_n=5):
    # Filter the dataframe by the specified genre
    genre_games = df_clean[df_clean['genres'].str.lower().str.contains(genre.lower(), na=False)]

    if genre_games.empty:
        print(f"No games found for genre: {genre}")
        return pd.DataFrame(columns=['genres', 'name'])

    # Sort the games by metacritic_review_score in descending order
    recommended_games = genre_games.sort_values(by='metacritic_review_score', ascending=False).head(top_n)

    return recommended_games[['genres', 'name']]

"""fungsi rekomendasi menggunakan 2 parameter, variabel yang akan digunakan untuk menampung inputan, dan top_n=5 akan menampilkan 5 data teratas dari inputan.
fungsi **str.lower** mengubah value dari kolom genres menjadi huruf kecil.
fungsi **str.lower** mengecek apakah string yang dimasukkan tersedia di kolom genres. yang juga sudah diubah ke huruf kecil.
fungsi na=False akan mengangap valued nan sebagai tidak ada
**if genre_games.empty** mengecek apakah data yang dimasukkan tidak ada didalam kolom
**recommended_games** mengurutkan variabel genre_games berdasrkan kolom metacritic_review_score secara Menurun
**fungsi return** akan mengembalikan nilai value, dalam hal ini genres dan name

### Membuat daftar preferensi pengguna
"""

user_preferences = {
    "Open-World Action": ["The Legend of Zelda: Ocarina of Time", "Grand Theft Auto IV"],
    "3D Platformer": ["Super Mario Galaxy"],
    "JRPG": ["Persona 5 Royal"],
    "Action RPG": ["Diablo III"],
    "MOBA":["Dota 2"],
    "Soccer":["FIFA 21"],
    "MMORPG":["World of Warcraft"],
    "Turn-Based Strategy":["Total War: Shogun 2"],
    "Virtual Life":["The Sims"]
}

"""user_preferences berfungsi menampung preferensi games pilihan pengguna, berdasarkan 10 genre teratas"""

recommended_games_by_genre = {}

for genre, games in user_preferences.items():
    recommended_games_by_genre[genre] = recommend_games_by_genre(genre, top_n=5)

display(recommended_games_by_genre)

"""sistem rekomendasi ini terdiri dari 3 langkah
1. memanggil fungsi rekomendasi
2. membuat perulangan untuk mendapatkan key dan items dari user_preferences. Dimana key adalah nama genre dan items adalah nama game. nama game ini akan dimasukkan kedalam fungsi di pembangunan model untuk dicarikan rekomendasinya
3. 5 Rekomendasi games teratas dari setiap genre akan ditampilkan

# Evaluasi
"""

precision_at_n_scores = []
recall_at_n_scores = []
f1_scores = []

for genre, recommended_df in recommended_games_by_genre.items():
    recommended_game_names = recommended_df['name'].tolist()
    liked_games = user_preferences.get(genre, [])

    relevant_recommendations = len(set(recommended_game_names) & set(liked_games))
    n = len(recommended_game_names)
    total_relevant_items = len(liked_games)

    precision_at_n = relevant_recommendations / n if n > 0 else 0
    precision_at_n_scores.append(precision_at_n)

    recall_at_n = relevant_recommendations / total_relevant_items if total_relevant_items > 0 else 0
    recall_at_n_scores.append(recall_at_n)

    f1_score = (2 * precision_at_n * recall_at_n) / (precision_at_n + recall_at_n) if (precision_at_n + recall_at_n) > 0 else 0
    f1_scores.append(f1_score)

    print(f"Genre '{genre}':")
    print(f"  Precision@{n}: {precision_at_n:.4f}")
    print(f"  Recall@{n}: {recall_at_n:.4f}")
    print(f"  F1-score@{n}: {f1_score:.4f}") # Display F1-score
    print("-" * 20)


average_precision_at_n = sum(precision_at_n_scores) / len(precision_at_n_scores) if precision_at_n_scores else 0
average_recall_at_n = sum(recall_at_n_scores) / len(recall_at_n_scores) if recall_at_n_scores else 0
average_f1_score = sum(f1_scores) / len(f1_scores) if f1_scores else 0

print(f"\nAverage Precision at N across all genres: {average_precision_at_n:.4f}")
print(f"Average Recall at N across all genres: {average_recall_at_n:.4f}")
print(f"Average F1-score at N across all genres: {average_f1_score:.4f}")

"""pertama 3 list untuk menampung precision, recall, dan f1_score dibuat.

Lalu fungsi rekomendasi akan dipanggil kembali dengan menggunakan data dari user_preferences

Selanjutnya dihitung precision, recall, dan f1_score nya

hasil akhir dari precision, recall, f1_score dari setiap genre akan ditampilkan.

rata-rata dari precision, recall, dan f1_score akan dihitung dan ditampilkan
"""